import { arithm, crypto, util, eio } from "./vjsc-1.1.1.js"



class SchnorrProofEG extends crypto.SchnorrProof {
    constructor(homomorphism: arithm.ExpHom) {
        super(homomorphism)
    }

    challenge(first: eio.ByteTree, second: crypto.HashFunction): arithm.PRingElement {
        const digest = second.hash(first.toByteArrayRaw())
        return this.homomorphism.domain.getPField().toElement(digest)
    }

    instanceToByteTree(instance: arithm.PGroupElement): eio.ByteTree {
        return instance.toByteTreeNoZero()
    }

    byteTreeToCommitment(byteTree: eio.ByteTree) {
        return this.homomorphism.range.toElementAlt(byteTree)
    }

    verifyEG(label: Uint8Array, instance: eio.ByteTree, 
        commitment: Uint8Array | eio.ByteTree, 
        challenge: Uint8Array, response: Uint8Array | eio.ByteTree): boolean {
        
        const instanceElement = this.homomorphism.range.toElementAlt(instance)
        
        const cbtt = eio.ByteTree.asByteTree(commitment)
        const rbtt = eio.ByteTree.asByteTree(response)
        
        const proof = new eio.ByteTree([cbtt, rbtt])
        
        const proofb = proof.toByteArray()
        
        return this.verify(label, instanceElement, crypto.sha256, proofb)
    }
}

class SigmaProofOrEG extends crypto.SigmaProofOr {
    constructor(challengeSpace: arithm.PRing, proofs: SchnorrProofEG[]) {
        super(challengeSpace, proofs)
    }
    
    instanceToByteTree(instances: arithm.PGroupElement[]): eio.ByteTree {
        console.log("*** CHECK instanceToByteTree using only 0 instance ***")
        return this.sigmaProofs[0].instanceToByteTree(instances[0]); 
    }
}

const p_param = "1044388881413152506691752710716624382579964249047383780384233483283953907971557456848826811934997558340890106714439262837987573438185793607263236087851365277945956976543709998340361590134383718314428070011855946226376318839397712745672334684344586617496807908705803704071284048740118609114467977783598029006686938976881787785946905630190260940599579453432823469303026696443059025015972399867714215541693835559885291486318237914434496734087811872639496475100189041349008417061675093668333850551032972088269550769983616369411933015213796825837188091833656751221318492846368125550225998300412344784862595674492194617023806505913245610825731835380087608622102834270197698202313169017678006675195485079921636419370285375124784014907159135459982790513399611551794271106831134090584272884279791554849782954323534517065223269061394905987693002122963395687782878948440616007412945674919823050571642377154816321380631045902916136926708342856440730447899971901781465763473223850267253059899795996090799469201774624817718449867455659250178329070473119433165550807568221846571746373296884912819520317457002440926616910874148385078411929804522981857338977648103126085895011648256092372242446818525911665961045150145231572613786749168750228798758833" 
const g_param =  "633902738424928856783669360417409461352724866437176267937054971987929518113968311572018846775440350331394872441420725806863767569147521628581387346133794141162759618915434384470928048515684966754389921404728037087585951549298706749491681316440418023335644037157549668734734747234193236480208211700649047792505290394509276323498712019417085994608675098219625068478389802372911974790447602798848267203035795626948013815751746314708193865142515067213438779931341448784231764283922931059803394647357407601820746377200693540251395985610151207325893305136968984729108604308872514815118245429658506703427331797397729626291989388778680839647127066755635696870257359738766274560298982571341199340105150191282665463341766016615086716556537263439886148093374656225718217401337340651580107886515914073965138178083420939392671278560530056147682312589783964279302141118430614587577025403023718516789910534505871873011436491653121601912717709648600938567837813521742472036386528727473354399846339619270536399678071529700504925046483796750809603796528358402843506478188359404393987635666119244256746743854126114174948922250715011664059118382465474343042744744366613138372697678748514832068141362891787033831013749278870696574778057534613154041019988"
const q_param = "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF43"
const p_value = new arithm.LargeInteger(BigInt(p_param).toString(16)) 

const p_group: arithm.ModPGroup = new arithm.ModPGroup(
    p_value,
    q_param,
    new arithm.LargeInteger(BigInt(g_param).toString(16)),
    1
)

// EG schnorr

const base = "0"
const pkString = "771632082893826147986001739015100390596891993741029383383193370304233499104250823855538643959571858723710269154759912753019096784501541341466089847723525936179275117294813910832130755064522276413408403471023984963242166938153514069926404934758661658257528718300677232438335809800481911356354734662950853501660000145640709855645391964120329649409161971123640130297755334097586116457161951378680819803181090266716165659095625287968651973742648699607244681163394174768818366596717488745410469972968169184799110618064506572240944976913745904205825731589635359287435860361627388201591772448956679969276015870287328631781151622921435584522469318802495374119157619783895250141260352043112231280456995705163091740813958450829394158007607091681144969124391351245862532242645135756046695113726745157026797494167586072376028245411007188932002163390051177405177929403986037713624631361941335904237672202322945639576289260377190069492485150920852597695986856461721309575473539085539067305946902967068996157306200623126274091131447903492233185316446352047430904649146900953667581866468414198230062952987476093392028184883548098669597063164623530920554398029085991176479347182588985435009542370035985705909513848711171297430669367333956054020665531"
const commitment = "855524102737723962237521812428163516510758472215122430748883967045793404610670486660838746338593516836807175220844862271956172237916825895104770694040470795774627892720188315911177975216605032583616572783566844990156734118631697744329747202531342126086084364807272804415263971824054437878227019291277181499890793582283936475804384924261570782589882446282601612685509819965549534661817037431870617808569006275303478418922921787433759189856537414790014248459920479769004944719601839710324503054028187366186002318450695442314555444834379123935239800522800849410674588735424404824238552328174159724689682911247357888577624031929436504729308249946315102980063945073742197389120598519998494024336364528292743100665497343942729876074620804185656867029739260884468147973912341294436973913754131277581281335396195732863443835202905358294591972398198785929932625800523526640842611226197640169414626291132546476245734896911256610173308930796713724251004101954262275095408602914563591770524170472874093884505606225402487328043308814573928647456345814437457966421969074184924876850092801468670935809698256567730363465668898628935636773457349835915405025536133488899137310929237406687860463524650411144922955938271886004161062616369682884025360583"
const challenge = "69140791929353205316569033988073687580493884653616429803092163035389876018302"
const response = "56419786273425368381000826435612342053915367930143492376714917629480845325942"

const baseBigInt = BigInt(base)
const pkBigInt = BigInt(pkString)
const commitmentBigInt = BigInt(commitment)
const challengeBigInt = BigInt(challenge)
const responseBigInt = BigInt(response)

const bb = util.hexToByteArray(baseBigInt.toString(16))
const pkb = util.hexToByteArray(pkBigInt.toString(16))
const cb = util.hexToByteArray(commitmentBigInt.toString(16))
const challengeb = util.hexToByteArray(challengeBigInt.toString(16))
const rb = util.hexToByteArray(responseBigInt.toString(16))

const eh = new arithm.ExpHom(p_group.pRing, p_group.getg())
let spa = new SchnorrProofEG(eh)

const instance = p_group.toElement(pkb)

const lbt = eio.ByteTree.asByteTree(bb)
const ibt = spa.instanceToByteTree(instance)
const cbt = eio.ByteTree.asByteTree(cb)
const rbt = eio.ByteTree.asByteTree(rb)

const prf = new eio.ByteTree([cbt, rbt])

const bt = new eio.ByteTree([lbt, ibt, cbt])
const ch = spa.challenge(bt, crypto.sha256)
console.log(ch.equals(p_group.pRing.toElement(challengeb)))

var ok = spa.verify(bb, instance, crypto.sha256, prf.toByteArray())
console.log(ok)

ok = spa.verifyEG(bb, eio.ByteTree.asByteTree(pkb), cb, challengeb, rb)
console.log(ok)

// EG Chaum-Pedersen

// prove that g^x = public key and alpha^x = partial decryption (Share in schema) and knowledge of x

const c1 = "982491594041718614644976072110281581060908279876429109897820063394361685352526660244070019012061086377070327932418644851063514010733541734245793498638261263147700622274012468553456886939815645893557734907745723832936261938550834117131183947337327784277172368530876549204482716197252099379469945072327565701119616926189264253468186472335895877301584823582614511489689368801602812546843862258979797608805874300963331990682240262118304624724201929191096535883336045623221039658513843326463214983315221953052976696305278326712718360938088890401763602152714586387434493093168107204700677190684406168950079147170761719295307272157054685649963346539115206096312678411993008505894259712095482618668850255988192290455035633036179832499060672853191953736261751627940038965443594588793600236049079887683517323320700279038192441521283944351308691259407616713914833777159627490320183979345701609669321528683820494748229712850838327834829177614158663027449276486242921402579515815757606002252699828069010893345499898904571169219678146822290038328245499897451392630952028777057439853701372458394838708890446829832801550720139839114541326459365622371672121987260609787103082876948554594639963774059937250869623113046398243076030241268637460502390915"
const c1b = util.hexToByteArray(BigInt(c1).toString(16))
// the generator for first side is the standard generator
const g = p_group.getg()
// the generator for second side is the alpha of the ciphertext
const h = p_group.toElement(c1b)
// the public key for the first trustee
const A = "771632082893826147986001739015100390596891993741029383383193370304233499104250823855538643959571858723710269154759912753019096784501541341466089847723525936179275117294813910832130755064522276413408403471023984963242166938153514069926404934758661658257528718300677232438335809800481911356354734662950853501660000145640709855645391964120329649409161971123640130297755334097586116457161951378680819803181090266716165659095625287968651973742648699607244681163394174768818366596717488745410469972968169184799110618064506572240944976913745904205825731589635359287435860361627388201591772448956679969276015870287328631781151622921435584522469318802495374119157619783895250141260352043112231280456995705163091740813958450829394158007607091681144969124391351245862532242645135756046695113726745157026797494167586072376028245411007188932002163390051177405177929403986037713624631361941335904237672202322945639576289260377190069492485150920852597695986856461721309575473539085539067305946902967068996157306200623126274091131447903492233185316446352047430904649146900953667581866468414198230062952987476093392028184883548098669597063164623530920554398029085991176479347182588985435009542370035985705909513848711171297430669367333956054020665531"
// the partial decryption share
const B = "282188385365803223653969552228466584168855204160995380029867334370016853462806371108188904195875425252070555622309579150922658677962432144380060017681353077495884670440454837068156975555492534238408328973734181791796600071610117785179421980125499783597659800768713817421632315247113271641550007301676387143337078447253935885388797882950473118510647530062823284557497947257835501109548998591256546080825195654779038222641327286943952797365459821662853181406935335036597997522600141928350032221461184635754904087071101940644462069072203352607285111962862406367904439126801490590157784967101510529045535205665217710707677375025592976440768469238592767217117118468335418296746736508886557131953963554821242433819236654675274999243212441649340770975474274081285532902814008683648461799634339049804636809347974882953807211478856485354267505719847024016514762774716711220637696471184617939334516499324719574884285852551720665883543389556973441274639487189745253762282328069102641376144630339273795982705992497355779893991663687939161675524024537557506752094517722545593558729075432629399768755825801446438431883366262627863195408284780355689352786886570181448926149843096031485826744569343544175160042657424042259586437424671434150211540502"
const cpCommitment = {
    c1: "501986327425004731934884237523307674973518257249515950047784672291975480823614486718832606472107101219707416652534583253098937649444647842058151092473107219434790541073139758004637243002484124046532587396898331333051669926250927441876348769291437025884813640411652306325929680749048372937156060818225264034363360256085717048421708872427878894815603681971921557582760285914850912476711269588987047956714631740793278701028493427879435093269180225480418519951855295776698857949565528176060927228650779254630782001329181844159893726225178184117973277526194322242175260446113254251358106832522861280044814691358327082889289346113556477470003956317562639309929054629103100795990545798012255607174674619187311200697490896575657474270826253388219781582385641218502265212228851234985128462093058469787820361192423870879514193318936710730049320838232076914004898404795250067237054430406157019170640160903666507717128529670864918567420405632198013576262825004024751984000132358022922178079035858611022812616571105114220226444084492792183050964855081533960480726114266574003898805073259438084159115656527679857544458194081770567696812495834380846523551104657802792869099769541509080977548493230342176943562766480175306891476608439487393795633608",
    c2: "9731553847928777317956302762923702443868298157731422864616175046743558721706494987491778410206000029977295272337862059791346336813662261675430220839577406736150049854470803589530877967397464916166357788306199306115672310151881050405982035193224046388042454660213887176995519912662330172686599265049851420476861232409199856657201135405013446907242875298739431000953579749713632215694299307181963637737911212582788897660764466143805095998925490232898371522223365096143436911488599302011972536986810537474111437341207605291058021232179451524617459051196510850792981595745013847777080875163922065529524728969212970981318553662483843419144455780267396670380459353412452327606205907891499333892022622102278759104508459336327165493046965739275943837174763725735958258004404730277111290756330234033714425750280770927908284406743040251949498524524343258232065409123576634874312763988226468150770854068888797378829969862320522452476296791858405931216068500013507972780657682703268578136226156648930571759342450354428728326757407559824110678091757326760369760906545872851954879296682082619429765599063333274933252177555713129691440737578448496578634426088960023229237113884234666453310561625186474107563938103771682331705234526235554670103846"
}
const cpChallenge = "92569401019849946312326950581411070387865374905795848181067315898257875169777"
const cpResponse = "8769326599422469570988103709328556955215629490517403020868076593438210056671"

const ppGroup = new arithm.PPGroup([p_group, p_group])
const pair = ppGroup.prod([g, h])

const ehProd = new arithm.ExpHom(p_group.pRing, pair)
const spc = new SchnorrProofEG(ehProd)

const Ab = util.hexToByteArray(BigInt(A).toString(16))
const Bb = util.hexToByteArray(BigInt(B).toString(16))

const Abt = eio.ByteTree.asByteTree(Ab)
const Bbt = eio.ByteTree.asByteTree(Bb)

const instancePair = new eio.ByteTree([Abt, Bbt])

const comm1b = util.hexToByteArray(BigInt(cpCommitment.c1).toString(16))
const comm2b = util.hexToByteArray(BigInt(cpCommitment.c2).toString(16))

const comm1bt = eio.ByteTree.asByteTree(comm1b)
const comm2bt = eio.ByteTree.asByteTree(comm2b)

const commitmentPair = new eio.ByteTree([comm1bt, comm2bt])

const cpCb = util.hexToByteArray(BigInt(cpChallenge).toString(16))
const cpRb = util.hexToByteArray(BigInt(cpResponse).toString(16))

ok = spc.verifyEG(bb, instancePair, commitmentPair, cpCb, cpRb)
console.log(ok)

// EG Chaum-Pedersen + CDS

const jointPublicKey = "1007333874185751980905216605723937615988127481323013941486964442788578993777307181436003011409675027992860496095293492919580032178608599503326746291990466168606010949664637258693730182757293220632263070383693354776175704127227658313439533540079724109087430633777388121992231518761158010515492778045076955418593375972425716679724613220401587560798086645583951952671095528891929772498360201635269129475376197690275822356343773254872354988525806451942550671631139843784571790216634478964016522459384969027987263481848058807406742646865088667119820028021977596993197894838919544593368806250653366479422007416765261636351681949812669957626406431815349855545283352035329187949356084456490609185298611497843717230449644669938221981255460584186509232607885535035599229908898698805577322256975048639628015330145072508346216584215954682561620081856644748005426457036398393806688157065547972072023043497560605554313501002780290184874757716107798738381856684846436220257998057199929625850522847021520548174288996289037355448693398647623860297451094932182692231270139922241537276673421240908379706032917071152875625834778152099422802876681713612908919690193243802496754551323834067259893249102984999393765150293731328428812480620305379552873636218"

/* const alpha = "407758478760839227773765952953267283687224845688335528164414421980959130228077215248572864369629524923169279822189304292027106886841890647244276880610885379437538459664982134397148671236763424389026575314723252010640618403107316477850699497133889142283778169132948142882776739911242086429672103523436194427482006369916235241052525820355192298066433977309702212926117876277961466741552842637819702252166372171813452116772040930781667024445436683859301289615357111090078149537959356877814958783058152100266241024381865780549244691574223371585769382930947918525139671921297106451099455709141326488705112087715863897145557823043173348337365686717354563701758885185257464844323743504137627803382900079074473208686516899837431912110356010252684397152108871913313726564011527529882226064527338383163712134504580094575153276649896999301234387017322069521019922508097268564640771571084072781069434674362469369165853577620125615692497923200107523965345529326748637085852019520278628574168615146407403564639639887573171383031729561063481414241353983370889889233097445457052179609858016300597038620011804229354194340941897189643095057035568379684354966351528783910770000381631653392410127019296611532067709037712333821421900575561648900921931869"  
const beta = "109247677203220021688571961627785626040530757938668773351291040933519848682101022375176323121081551222548912793732857610359520330361659222584907898330173362516690874718413114280955205753921221188433727287101104543667415758307107202097683918954545333903993751746605076327883848652043299563848601571727160102528270040519973034052177875618419272572518656490157358926060046492142939893154387244416567632419031035666425696942255131318735228702097941320456388674601147439411008518898606879692193578545827657622848261292943666674405034294946841452241010198411336548382374474064197329991868499874590987927851736030156262344597733001071441663183116710622786859417919535279694812654535283672416414671657967135725963672265758204304286379190448656467222130246412522653531639221116509622386102381150972351952583122591099994520364804082106308393344412079319986632881792678323999407128557570489310137225538902969427992150914054150981853840570160893149683914159467281139831315215496382772045964725672492040506918389010980869045715023555979762595200796691890593013496579994264494391586794689989787069629762770017100584262493359581936705337118130558896846986167538628901838274152461033006863724046070117585826639461379458619963172754641958850552273682"

const challenge1 = "53581038711681048354188803299498974752606526760850403385189030371359049007197"
const response1 = "43829089432952587846720333602806603561301384020411673390993073397653143385180"
const challenge2 = "71314495010254657836080586464330626627261365260618426367204872973613742433268"
const response2 = "63495532564190821829483116055902614547830636429699711075560082190740290206349"

const commitment11 = "747273137587795004647524548916220211516273750938191295338051381845746744555631893514458628463311135874193862941452907000913560367729940790138828683779939005992923009129795626294994931839278931546161275635226629356282581410504838115086943293645672886855104421195699065107346239623385545283901504805961190562637706690216612254388475969308877835186667186044382925565237647338139360067120885310015840230789753431015434022777139361792196492981265562136126895274269363736502445071863442249932867936904616359550048654046997105023420348963811948651329056312956567125492159740164586776689440894827764112711156322166061177414291236320128049082077894886564573734937392914335614175088914832268685899208289336266372200596200093699020540279580957032973024077104857296798685274564183217636681005069769544415452392682964755120417189466627574929925790479081861475446169003938592740365504869406107466588355889583808771411103137937092299925918176981623590817657851682543722124075722932012013217789853395959565567556256131861180832811124285977649465628528376799442791773016306829464458127851075506188520247534803517608957704523873746138562726546377929697129751546391023924720035868941986271581155895608994122600987167771732592406761448143306283165406228"
const commitment12 = "247990764780601093231732248663680538015257238576318415891796143973669743192510032939899355310190455957966258957888231346597754697794984758176213533981995963471605589269542887826077807647491615672674664024864921089657968693585817702726087204566175805768668525458699812001039861638339376006121220590081444372242417612739227812055048381048917600605466261988171920579534411629011504212928650552629090307593393946782719664343510729065801305355523008351489967674874488089284002601729576425800010103885282836536374299184604560387650649695318494710483679946570471125278979327464156040730123852663084263919368441187911686639940117830726437121639033884861821888671949066273941704364258857905932877411287184901857141291956472509227931560698060718221235629810325985894303439857892661287138377571793560366074593092513998401429360223300349151431080372690856379674684364504251327795712627839093142058378003186990030006429675118462227895363017595963946924262809929226532726487755030065331993239592780435156674016069611208057906089582257131820199560866270051730403418102152862363335463552996223767273598090873537009080355853149880999200950457073185651195763209420672916038995222257460575378221633800932660144603061895020093985881900642695434745078494"

const commitment21 = "1002196935901835719527870505721645352039245226039565259017702162911331097652559675593989565753351593417222078709476333416656855766676452238557457664989020050523078053765715894644558188222524684456402092150357589915643748428847883087416905507890546415291026518429447213337604173041313483670533033967379061266029451825836572286366104688328863484883907632509530640787950217724885942577126463488616699386797871233122537407828288578183849820467559837620110853088053446343843143285763162840303662771866431996422854921999556478692122808592509889335250108612735568843420944219305024809355489263891572635220483948935235937988144373953621138303483411482818302164015350902007942753382572826338135655258314199708995200887129487696068509311853590368785245678481724773504114592652599800929452280228270800154042195775938764241428242574722019525531671517782042861838069607674921649320549711113639347059417300856904899416720325216438724885405142024676993967363135331594312923824105358918904842249812838743222925750702151017759022360357653716326531764392217179990365972472010651630890520713511766655138606943405679198813325003205299941893836502547078982205391611621761142880232955802792719126332283923106502609216736823989851519741957413585773843603351"
const commitment22 = "999855702003819459693267598516573628185059104522487887928947008410298261647565831974634316216260573943848706570397946056346474156989544989096919239617663749537432997287436869445585587231050937200929566263812360567319905480752934408771695824782693267745576180947727160855049114614741825992098952963244904333869345782503262900354080115914005590987780683932318048621406962202333784808416540134182140361161521254316668016627904056218978568253781541283451232409679218457974792808965188648018013380509495527808443500209353982776088776439670173098840760195675488100473527026319656010884290649169023142685083582755810624741700672804329383417175577707105345527126233905394594968393607658156024859215255525340724104038431552959441523239184353369678755609812803929681237234199193041861405840019372591109648681492129854413755561851284665986853474018768514709768068852282054011637369702914407267830931634480994875520423130069632551450435606230859471199495007004275641376453991436575626142366636570253059991115333856187551833618257775382316776144758746471871026119706804989822060154004512355573074896235257126167751405267248638275226465117849859124042651930001784239760140559196524443945698521993856263979984647196554248956712918870875489313578110"
*/

const alpha = "238112447444319351956870507269226188174971071369554968515860388266254973232069479651661145269920349450155367165577912519381219140659123889952208518299367330549779310703319895292813582196876822404519496641632062882464036950355855229865589318834799914517282400092132735306437779707529289324062289830744402836099688579664273755786006032432742956328831546575338393589752435535922634106596290252555174402285634307502899494456759733684017927141032617406976808844893589244863321208964095552604012198777607168162024849710290943131049705186437148298982494738990807553057793078802131913634198344705419290091318965343597658080711955312211448546847946877651718774592005432151173862649554266842322595469843355598463278515148914035566120875205079339959192980461468876886706268825366565535677247116601498497889158329056751097961170902735257158275570023454748580398255693303968257878621742138099150923508476188599244720071907338565287913815699820608654356765898101287299054078380234363368707375487567502425208754124114755129455757422754098322150113149333664894894526367521767904154084541886780203221936449607391698507064957742224369520192463930801796949989472349452879297477212503740150779740280042954561387988572450474134093960239375192051283312005"  
const beta = "1034503129203500860923798670084625321075085802290760359882620299975460662051505365939853988775217218228653784697570334077760664326641785684226717027681635293485726694100518231349493494907238497343178386861659861803178183534341664728680187141636762268690743470366733987097080334142873811211427744430851498967255771173954616792350179577885364100197182326412366771013144208051980860441981918110158216793704192532316755212138488865170001843907306246178751902577623743512473429345445588500993194721168697539441689318979432325634083824029885985189337034958078823434844680842749653569956946497341904711142764623129309908705845973787918683960325580769811960352357983647001421831905598613482158773527251865888308002704066974488240090503659792721245547392345223644525826680193957863444511658591387660847216878421870571048958479371811955545074780569081627124270074782797737490887790049605878552219453110875447139377497759711118621561381056821019889081636690957107896031699026065894387967479783589966721126795638255391917351388788009396399137826483241353849551817526278514822300379700730487109002354476240564725301720762333753585222366635337178137324935519394870597469121104022675517960872781006909351168292007809186806015294486104243863344019401"

const challenge1 = "92772478972385159613112000571084396849298377667737660564157022857530751548399"
const response1 = "40860417141953063578331289017462525355858895112937619299369748708075741533516"
const challenge2 = "71895649865552392644954859620732286519845471062350619425462956351098778374669"
const response2 = "112522441568959945123005572219365745674623353693383108396338992098393173776181"

const commitment11 = "106309592335986165542583171604658887098694619760371644969003567364538154044447754579757302411801146036532779423040355103063570169099471774520759345295758144671804680378066653864741662820686748621569997084987919236544758191919613666432250687298885456129194233107221558585307281133468787257680402359511370719605212824148082096483782770492005842087519400628927744324682232493584997451769725013995961531264352538413892209391573189099857097569472458362391454260889509648701327302480512648698866313194398837738438139538053270768605552021500111595351557246877940177102316880805166026971904030330368942131801356842851906949188585886255407117299398750608720169456866280723365936165455570192774494648564985325402010063978721884047655759895612081565060475015443806623772755281678916168876933367804398824241799753296894473802075714767266303766890773488837581558507503965716557360061758743954927784773326899188198172629209147381474592219367747590642770527754367106900498667804641654056537073805076314236195241043030741602548295727111287509552723704901462853943306066506892914784127882075767934745412141887810503590785524349727704245926655811615270767748881039892142766265868931781731432259619463589624877972393203393902491660982051052725832658487"
const commitment12 = "499059889726011357219915187185019223353331313239251872597158033220698207523743725089094132475968880365693907059598648797308985783102984795340788372967996306098719448490744528658793385722155537848169517315514830245007616175660877532555710301617727750064219394175894708283821467190697598813635223526789933328058831334402025815342002313692390602939709576297135969916746544596797813344171754587298132267152728051327981124421123635607396527817931663234222930750099918928730154609795959721881321579226188241613002886910835033134590820658817211823820404093853602532819894504571584861825761348455298631483849399818868953706567271154378481260794818416600203396205070373606911422513720832029175353284191985486015332151552032457182886344072659051056987174479794020254631455687755461514696593596344321550677806280261549266813954292935699465362979953262041382161569705950255575198415438181051259362021026638044826808713329011122739634391456902618269271105578150358233355377429440849662598468048652175544615932655256652119952675376609579843637697501075793697337039978673892831513584708599855077151464034195783507829519031154165041558093027676825103435562232803452491242894001317141691324961779668837106229520502063549995226953153205697169466631559"

const commitment21 = "180325794999918004965015871842548685185187339806812539898953725485071756861155246377945737438975885479930092976444370758557978110820910451466475575580817037660513340896519758186541312205965556952044811561853487150113994731861696408791744952341475572900972987605896672922480389906299911869050536742993755573792924203782871967143036916500568751994163816296592107836037836168754403036510647730971383914591052578362546788156819327241833955742284913218514854554103328542624854778285105567153350021496073348149731325642111837995754596265631659849217272018143573243212820000171138380564895824300320136650962799595683462992486492019968989480064482902515703769609697078770004171438282589944648761776572672262593496761562628911526439720616738227917674579579818549842814156060383621629129966346544877052175373459992452507287611142151130046569974483444273646472543584396686344344864970045028648546740733496488019070323747283664775094502873798671195272616273979625978003513570643848905788054008522682693045038024138822172857666352966118009902878892706532093327506867888773837047286162240023236599304082519799648989100366331804625400243626005418514682694927936545069605971959770878170009767256098845148558678597602670823795665027665421238877507403"
const commitment22 = "199693185716418834244441374951577646478208469879241245017632280071522004295625667039720807650417819794002304944612564627492705335010260985199905207739375341351698510804952482498011991466119426484836503164080595461482239340744394116427067174252119943867788646120633603531809109071969245720540942011081998933635541977406321670912308551784220938985546304415389280957318290771805313914204838090857447683053632078816462497561471678071519819057848991911280401845284249829465753831280400059831823509279597402467859383718721643208923771997977956959852476544085040752029443399417778449907801129322359916831685230799653869664499251109874495608894593343242607432094434544569561976386665001446603351915883734589829583909977326906667728220791070656394000842824921514564083842537602050630268684303684768494858602297988350648787383431950267722293601095518267901504804218044617507918299048490219244164200020053551475103310749793398451096844640104097770044610806435563344882741697452478722123269549890392337375714824204849698978813411072624446481729229306580425520752876917610385587203007657894324187924921027101371737970630192380555648322984050169363237411066226436687604249626957219301045036594128067523411337929033229280103060481162476304213144733"

const alphab = util.hexToByteArray(BigInt(alpha).toString(16))
const betab = util.hexToByteArray(BigInt(beta).toString(16))

const challenge1b = util.hexToByteArray(BigInt(challenge1).toString(16))
const response1b = util.hexToByteArray(BigInt(response1).toString(16))
const challenge2b = util.hexToByteArray(BigInt(challenge2).toString(16))
const response2b = util.hexToByteArray(BigInt(response2).toString(16))

const commitment11b = util.hexToByteArray(BigInt(commitment11).toString(16))
const commitment12b = util.hexToByteArray(BigInt(commitment12).toString(16))
const commitment21b = util.hexToByteArray(BigInt(commitment21).toString(16))
const commitment22b = util.hexToByteArray(BigInt(commitment22).toString(16))

const publicKeyb = util.hexToByteArray(BigInt(jointPublicKey).toString(16))

// standard generator for alpha element of ciphertext
const g1 = p_group.getg()
// public key for beta element of ciphertext
const g2 = p_group.toElement(publicKeyb)

const pairCDS = ppGroup.prod([g1, g2])
const ehCds = new arithm.ExpHom(p_group.pRing, pairCDS)
const sps: SchnorrProofEG[] = []
sps[0] = new SchnorrProofEG(ehCds)
sps[1] = new SchnorrProofEG(ehCds)

const cds = new SigmaProofOrEG(p_group.pRing, sps)
const alphae = p_group.toElement(alphab)
const betae = p_group.toElement(betab)

const instances: arithm.ModPGroupElement[] = []
// 0 or 1
instances[0] = ppGroup.prod([alphae, betae])
instances[1] = ppGroup.prod([alphae, betae.mul(g1.inv())])
const commitments = []
commitments[0] = new eio.ByteTree([
    eio.ByteTree.asByteTree(commitment11b),
    eio.ByteTree.asByteTree(commitment12b) 
])
commitments[1] = new eio.ByteTree([
    eio.ByteTree.asByteTree(commitment21b),
    eio.ByteTree.asByteTree(commitment22b) 
])
const responses = []
// verificatum format groups challenges and responses this way
responses[0] = new eio.ByteTree([
    eio.ByteTree.asByteTree(challenge1b),
    eio.ByteTree.asByteTree(challenge2b) 
])
responses[1] = new eio.ByteTree([
    eio.ByteTree.asByteTree(response1b),
    eio.ByteTree.asByteTree(response2b) 
])

const proof = new eio.ByteTree([new eio.ByteTree(commitments), new eio.ByteTree(responses)])

const okCds = cds.verify(bb, instances, crypto.sha256, proof.toByteArray())
console.log(okCds)